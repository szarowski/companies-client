{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/add-company/add-company.component.css","webpack:///./src/app/add-company/add-company.component.html","webpack:///./src/app/add-company/add-company.component.ts","webpack:///./src/app/add-owner/add-owner.component.css","webpack:///./src/app/add-owner/add-owner.component.html","webpack:///./src/app/add-owner/add-owner.component.ts","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/app.routing.ts","webpack:///./src/app/edit-company/edit-company.component.css","webpack:///./src/app/edit-company/edit-company.component.html","webpack:///./src/app/edit-company/edit-company.component.ts","webpack:///./src/app/list-company/list-company.component.css","webpack:///./src/app/list-company/list-company.component.html","webpack:///./src/app/list-company/list-company.component.ts","webpack:///./src/app/service/company.service.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error('Cannot find module \"' + req + '\".');\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","module.exports = \"\"","module.exports = \"<div class=\\\"col-md-6\\\">\\n  <h2 class=\\\"text-center\\\">Add Company</h2>\\n  <form [formGroup]=\\\"addForm\\\" (ngSubmit)=\\\"onSubmit()\\\">\\n\\n    <div class=\\\"form-group\\\">\\n      <label for=\\\"name\\\">Company name:</label>\\n      <input type=\\\"name\\\" formControlName=\\\"name\\\" placeholder=\\\"Name\\\" name=\\\"name\\\" class=\\\"form-control\\\" [ngClass]=\\\"{ 'is-invalid': submitted && f.name.errors }\\\" id=\\\"name\\\">\\n      <div *ngIf=\\\"submitted && f.name.errors\\\" class=\\\"invalid-feedback\\\">\\n        <div *ngIf=\\\"f.name.errors.required\\\">Company name is required</div>\\n      </div>\\n    </div>\\n\\n    <div class=\\\"form-group\\\">\\n      <label for=\\\"address\\\">Address:</label>\\n      <input type=\\\"address\\\" formControlName=\\\"address\\\" placeholder=\\\"Address\\\" name=\\\"address\\\" class=\\\"form-control\\\" [ngClass]=\\\"{ 'is-invalid': submitted && f.address.errors }\\\" id=\\\"address\\\">\\n      <div *ngIf=\\\"submitted && f.address.errors\\\" class=\\\"invalid-feedback\\\">\\n        <div *ngIf=\\\"f.address.errors.required\\\">Company address is required</div>\\n      </div>\\n    </div>\\n\\n    <div class=\\\"form-group\\\">\\n      <label for=\\\"city\\\">City:</label>\\n      <input formControlName=\\\"city\\\" placeholder=\\\"City\\\" name=\\\"city\\\" class=\\\"form-control\\\" [ngClass]=\\\"{ 'is-invalid': submitted && f.city.errors }\\\" id=\\\"city\\\">\\n      <div *ngIf=\\\"submitted && f.city.errors\\\" class=\\\"invalid-feedback\\\">\\n        <div *ngIf=\\\"f.city.errors.required\\\">Company city is required</div>\\n      </div>\\n    </div>\\n\\n    <div class=\\\"form-group\\\">\\n      <label for=\\\"country\\\">Country:</label>\\n      <input formControlName=\\\"country\\\" placeholder=\\\"Country\\\" name=\\\"country\\\" class=\\\"form-control\\\" [ngClass]=\\\"{ 'is-invalid': submitted && f.country.errors }\\\" id=\\\"country\\\">\\n      <div *ngIf=\\\"submitted && f.country.errors\\\" class=\\\"invalid-feedback\\\">\\n        <div *ngIf=\\\"f.country.errors.required\\\">Company country is required</div>\\n      </div>\\n    </div>\\n\\n    <div class=\\\"form-group\\\">\\n      <label for=\\\"email\\\">Email address:</label>\\n      <input type=\\\"email\\\" formControlName=\\\"email\\\" placeholder=\\\"Email\\\" name=\\\"email\\\" class=\\\"form-control\\\" id=\\\"email\\\">\\n    </div>\\n\\n    <div class=\\\"form-group\\\">\\n      <label for=\\\"phone\\\">Phone number:</label>\\n      <input formControlName=\\\"phone\\\" placeholder=\\\"Phone\\\" name=\\\"phone\\\" class=\\\"form-control\\\" id=\\\"phone\\\">\\n    </div>\\n\\n    <div class=\\\"form-group\\\">\\n      <label for=\\\"owners_string\\\">Comma-separated Beneficial Owners:</label>\\n      <input formControlName=\\\"owners_string\\\" placeholder=\\\"Beneficial Owners\\\" name=\\\"owners_string\\\" class=\\\"form-control\\\" [ngClass]=\\\"{ 'is-invalid': submitted && f.owners_string.errors }\\\" id=\\\"owners_string\\\">\\n      <div *ngIf=\\\"submitted && f.owners_string.errors\\\" class=\\\"invalid-feedback\\\">\\n        <div *ngIf=\\\"f.owners_string.errors.required\\\">Company beneficial owners are required</div>\\n      </div>\\n    </div>\\n\\n    <button class=\\\"btn btn-success\\\">Create</button>\\n  </form>\\n</div>\\n\"","import { Component, OnInit } from '@angular/core';\nimport {FormBuilder, FormGroup, Validators} from '@angular/forms';\nimport {CompanyService} from '../service/company.service';\nimport {first} from 'rxjs/operators';\nimport {Router} from '@angular/router';\n\n@Component({\n  selector: 'app-add-company',\n  templateUrl: './add-company.component.html',\n  styleUrls: ['./add-company.component.css']\n})\nexport class AddCompanyComponent implements OnInit {\n\n  constructor(private formBuilder: FormBuilder, private router: Router, private companyService: CompanyService) { }\n\n  addForm: FormGroup;\n  submitted = false;\n\n  ngOnInit() {\n\n    this.addForm = this.formBuilder.group({\n      company_id: [uuidv4()],\n      name: ['', Validators.required],\n      address: ['', Validators.required],\n      city: ['', Validators.required],\n      country: ['', Validators.required],\n      email: [''],\n      phone: [''],\n      owners_string: ['', Validators.required],\n      beneficial_owners: [['']]\n    });\n\n    function uuidv4() {\n      return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n        const r = Math.random() * 16 | 0, v = c === 'x' ? r : (r & 0x3 | 0x8);\n        return v.toString(16);\n      });\n    }\n  }\n\n  get f() {\n    return this.addForm.controls;\n  }\n\n  onSubmit() {\n    this.submitted = true;\n    if (this.addForm.invalid) {\n      return;\n    }\n    this.companyService.createCompany(this.addForm.value)\n      .subscribe(\n        data => {\n          this.router.navigate(['list-company']);\n        },\n        error => {\n          alert(error);\n        });\n  }\n}\n","module.exports = \"\"","module.exports = \"<div class=\\\"col-md-6\\\">\\n  <h2 class=\\\"text-center\\\">Add Beneficial Owner</h2>\\n  <form [formGroup]=\\\"addForm\\\" (ngSubmit)=\\\"onSubmit()\\\">\\n\\n    <div class=\\\"form-group\\\">\\n      <label for=\\\"owner_name\\\">Beneficial Owner:</label>\\n      <input formControlName=\\\"owner_name\\\" placeholder=\\\"Beneficial Owner\\\" name=\\\"owner_name\\\" class=\\\"form-control\\\" [ngClass]=\\\"{ 'is-invalid': submitted && f.owner_name.errors }\\\" id=\\\"owner_name\\\">\\n      <div *ngIf=\\\"submitted && f.owner_name.errors\\\" class=\\\"invalid-feedback\\\">\\n        <div *ngIf=\\\"f.owner_name.errors.required\\\">Company beneficial owner name is required</div>\\n      </div>\\n    </div>\\n\\n    <button class=\\\"btn btn-success\\\">Update</button>\\n  </form>\\n</div>\\n\"","import { Component, OnInit } from '@angular/core';\nimport {FormBuilder, FormGroup, Validators} from '@angular/forms';\nimport {CompanyService} from '../service/company.service';\nimport {first} from 'rxjs/operators';\nimport {Router} from '@angular/router';\nimport {BeneficialOwner, Company} from '../model/company.model';\n\n@Component({\n  selector: 'app-add-owner',\n  templateUrl: './add-owner.component.html',\n  styleUrls: ['./add-owner.component.css']\n})\nexport class AddOwnerComponent implements OnInit {\n\n  companyId: string;\n  addForm: FormGroup;\n  submitted = false;\n\n  constructor(private formBuilder: FormBuilder, private router: Router, private companyService: CompanyService) { }\n\n  ngOnInit() {\n\n    this.companyId = localStorage.getItem('addOwnerCompanyId');\n    if (!this.companyId) {\n      alert('Invalid action.');\n      this.router.navigate(['list-company']);\n      return;\n    }\n    this.addForm = this.formBuilder.group({\n      company_id: [],\n      owner_name: ['', Validators.required]\n    });\n    this.companyService.getCompanyById(this.companyId)\n      .subscribe( data => {\n        this.addForm.setValue({company_id: this.companyId, owner_name: ''});\n      });\n  }\n\n  get f() {\n    return this.addForm.controls;\n  }\n\n  onSubmit() {\n    this.submitted = true;\n    if (this.addForm.invalid) {\n      return;\n    }\n    this.companyService.addOwner(this.companyId, this.addForm.value)\n      .subscribe(\n        data => {\n          this.router.navigate(['list-company']);\n        },\n        error => {\n          alert(error);\n        });\n  }\n}\n","module.exports = \"\"","module.exports = \"<router-outlet></router-outlet>\\n\"","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'app';\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { AppComponent } from './app.component';\nimport { routing } from './app.routing';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { HttpClientModule} from '@angular/common/http';\nimport { AddCompanyComponent } from './add-company/add-company.component';\nimport { EditCompanyComponent } from './edit-company/edit-company.component';\nimport { ListCompanyComponent } from './list-company/list-company.component';\nimport { CompanyService } from './service/company.service';\nimport { AddOwnerComponent } from './add-owner/add-owner.component';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    ListCompanyComponent,\n    AddCompanyComponent,\n    EditCompanyComponent,\n    AddOwnerComponent\n  ],\n  imports: [\n    BrowserModule,\n    routing,\n    ReactiveFormsModule,\n    HttpClientModule\n  ],\n  providers: [CompanyService],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { RouterModule, Routes } from '@angular/router';\nimport {AddCompanyComponent} from './add-company/add-company.component';\nimport {ListCompanyComponent} from './list-company/list-company.component';\nimport {EditCompanyComponent} from './edit-company/edit-company.component';\nimport {AddOwnerComponent} from './add-owner/add-owner.component';\n\nconst routes: Routes = [\n  { path: 'add-company', component: AddCompanyComponent },\n  { path: 'list-company', component: ListCompanyComponent },\n  { path: 'edit-company', component: EditCompanyComponent },\n  { path: 'add-owner', component: AddOwnerComponent },\n  { path : '', component : ListCompanyComponent }\n];\n\nexport const routing = RouterModule.forRoot(routes);\n","module.exports = \"\"","module.exports = \"<div class=\\\"col-md-6\\\">\\n  <h2 class=\\\"text-center\\\">Edit Company</h2>\\n  <form [formGroup]=\\\"editForm\\\" (ngSubmit)=\\\"onSubmit()\\\">\\n\\n    <div class=\\\"form-group\\\">\\n      <label for=\\\"name\\\">Company name:</label>\\n      <input type=\\\"name\\\" formControlName=\\\"name\\\" placeholder=\\\"Name\\\" name=\\\"name\\\" class=\\\"form-control\\\" [ngClass]=\\\"{ 'is-invalid': submitted && f.name.errors }\\\" id=\\\"name\\\">\\n      <div *ngIf=\\\"submitted && f.name.errors\\\" class=\\\"invalid-feedback\\\">\\n        <div *ngIf=\\\"f.name.errors.required\\\">Company name is required</div>\\n      </div>\\n    </div>\\n\\n    <div class=\\\"form-group\\\">\\n      <label for=\\\"address\\\">Address:</label>\\n      <input type=\\\"address\\\" formControlName=\\\"address\\\" placeholder=\\\"Address\\\" name=\\\"address\\\" class=\\\"form-control\\\" [ngClass]=\\\"{ 'is-invalid': submitted && f.address.errors }\\\" id=\\\"address\\\">\\n      <div *ngIf=\\\"submitted && f.address.errors\\\" class=\\\"invalid-feedback\\\">\\n        <div *ngIf=\\\"f.address.errors.required\\\">Company address is required</div>\\n      </div>\\n    </div>\\n\\n    <div class=\\\"form-group\\\">\\n      <label for=\\\"city\\\">City:</label>\\n      <input formControlName=\\\"city\\\" placeholder=\\\"City\\\" name=\\\"city\\\" class=\\\"form-control\\\" [ngClass]=\\\"{ 'is-invalid': submitted && f.city.errors }\\\" id=\\\"city\\\">\\n      <div *ngIf=\\\"submitted && f.city.errors\\\" class=\\\"invalid-feedback\\\">\\n        <div *ngIf=\\\"f.city.errors.required\\\">Company city is required</div>\\n      </div>\\n    </div>\\n\\n    <div class=\\\"form-group\\\">\\n      <label for=\\\"country\\\">Country:</label>\\n      <input formControlName=\\\"country\\\" placeholder=\\\"Country\\\" name=\\\"country\\\" class=\\\"form-control\\\" [ngClass]=\\\"{ 'is-invalid': submitted && f.country.errors }\\\" id=\\\"country\\\">\\n      <div *ngIf=\\\"submitted && f.country.errors\\\" class=\\\"invalid-feedback\\\">\\n        <div *ngIf=\\\"f.country.errors.required\\\">Company country is required</div>\\n      </div>\\n    </div>\\n\\n    <div class=\\\"form-group\\\">\\n      <label for=\\\"email\\\">Email address:</label>\\n      <input type=\\\"email\\\" formControlName=\\\"email\\\" placeholder=\\\"Email\\\" name=\\\"email\\\" class=\\\"form-control\\\" id=\\\"email\\\">\\n    </div>\\n\\n    <div class=\\\"form-group\\\">\\n      <label for=\\\"phone\\\">Phone number:</label>\\n      <input formControlName=\\\"phone\\\" placeholder=\\\"Phone\\\" name=\\\"phone\\\" class=\\\"form-control\\\" id=\\\"phone\\\">\\n    </div>\\n\\n    <div class=\\\"form-group\\\">\\n      <label for=\\\"owners_string\\\">Comma-separated Beneficial Owners:</label>\\n      <input formControlName=\\\"owners_string\\\" placeholder=\\\"Beneficial Owners\\\" name=\\\"owners_string\\\" class=\\\"form-control\\\" [ngClass]=\\\"{ 'is-invalid': submitted && f.owners_string.errors }\\\" id=\\\"owners_string\\\">\\n      <div *ngIf=\\\"submitted && f.owners_string.errors\\\" class=\\\"invalid-feedback\\\">\\n        <div *ngIf=\\\"f.owners_string.errors.required\\\">Company beneficial owners are required</div>\\n      </div>\\n    </div>\\n\\n    <button class=\\\"btn btn-success\\\">Update</button>\\n  </form>\\n</div>\\n\"","import { Component, OnInit } from '@angular/core';\nimport {CompanyService} from '../service/company.service';\nimport {Router} from '@angular/router';\nimport {Company} from '../model/company.model';\nimport {FormBuilder, FormGroup, Validators} from '@angular/forms';\nimport {first} from 'rxjs/operators';\n\n@Component({\n  selector: 'app-edit-company',\n  templateUrl: './edit-company.component.html',\n  styleUrls: ['./edit-company.component.css']\n})\nexport class EditCompanyComponent implements OnInit {\n\n  constructor(private formBuilder: FormBuilder, private router: Router, private companyService: CompanyService) { }\n\n  company: Company;\n  editForm: FormGroup;\n  submitted = false;\n\n  ngOnInit() {\n    const companyId = localStorage.getItem('editCompanyId');\n    if (!companyId) {\n      alert('Invalid action.');\n      this.router.navigate(['list-company']);\n      return;\n    }\n    this.editForm = this.formBuilder.group({\n      company_id: [],\n      name: ['', Validators.required],\n      address: ['', Validators.required],\n      city: ['', Validators.required],\n      country: ['', Validators.required],\n      email: [''],\n      phone: [''],\n      owners_string: ['', Validators.required],\n      beneficial_owners: [[]]\n    });\n    this.companyService.getCompanyById(companyId)\n      .subscribe( data => {\n        data.owners_string = data.beneficial_owners.join(',');\n        this.editForm.setValue(data);\n      });\n  }\n\n  get f() {\n    return this.editForm.controls;\n  }\n\n  onSubmit() {\n    this.submitted = true;\n    if (this.editForm.invalid) {\n      return;\n    }\n    this.companyService.updateCompany(this.editForm.value)\n      .pipe(first())\n      .subscribe(\n        data => {\n          this.router.navigate(['list-company']);\n        },\n        error => {\n          alert(error);\n        });\n  }\n}\n","module.exports = \"\"","module.exports = \"<div class=\\\"col-md-6\\\">\\n  <h2> Company Details</h2>\\n  <button class=\\\"btn btn-danger\\\" (click)=\\\"addCompany()\\\"> Add Company</button>\\n  <table class=\\\"table table-striped\\\">\\n    <thead>\\n    <tr>\\n      <th class=\\\"hidden\\\">Company Id</th>\\n      <th>Name</th>\\n      <th>Address</th>\\n      <th>City</th>\\n      <th>Country</th>\\n      <th>Email</th>\\n      <th>Phone</th>\\n      <th>Beneficial Owners</th>\\n      <th>Action</th>\\n    </tr>\\n    </thead>\\n    <tbody>\\n    <tr *ngFor=\\\"let company of companys\\\">\\n      <td class=\\\"hidden\\\">{{company.company_id}}</td>\\n      <td>{{company.name}}</td>\\n      <td>{{company.address}}</td>\\n      <td>{{company.city}}</td>\\n      <td>{{company.country}}</td>\\n      <td>{{company.email}}</td>\\n      <td>{{company.phone}}</td>\\n      <td>{{company.beneficial_owners.join(\\\",\\\")}}</td>\\n      <td>\\n        <button class=\\\"btn btn-danger\\\" (click)=\\\"deleteCompany(company)\\\"> Delete</button>\\n        <button class=\\\"btn btn-danger\\\" (click)=\\\"editCompany(company)\\\" style=\\\"margin-left: 20px;\\\"> Edit</button>\\n        <button class=\\\"btn btn-danger\\\" (click)=\\\"addOwner(company)\\\" style=\\\"margin-left: 20px;\\\"> Add Owner</button>\\n      </td>\\n    </tr>\\n    </tbody>\\n  </table>\\n</div>\\n\"","import { Component, OnInit } from '@angular/core';\nimport {Router} from '@angular/router';\nimport {CompanyService} from '../service/company.service';\nimport {Company} from '../model/company.model';\n\n@Component({\n  selector: 'app-list-company',\n  templateUrl: './list-company.component.html',\n  styleUrls: ['./list-company.component.css']\n})\nexport class ListCompanyComponent implements OnInit {\n\n  companys: Company[];\n\n  constructor(private router: Router, private companyService: CompanyService) { }\n\n  ngOnInit() {\n    this.companyService.getCompanies()\n      .subscribe( data => {\n        this.companys = data;\n      });\n  }\n\n  deleteCompany(company: Company): void {\n    this.companyService.deleteCompany(company.company_id)\n      .subscribe( data => {\n        this.companys = this.companys.filter(u => u !== company);\n      });\n  }\n\n  editCompany(company: Company): void {\n    localStorage.removeItem('editCompanyId');\n    localStorage.setItem('editCompanyId', company.company_id);\n    this.router.navigate(['edit-company']);\n  }\n\n  addCompany(): void {\n    this.router.navigate(['add-company']);\n  }\n\n  addOwner(company: Company): void {\n    localStorage.setItem('addOwnerCompanyId', company.company_id);\n    this.router.navigate(['add-owner']);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport {BeneficialOwner, Company} from '../model/company.model';\n\n@Injectable()\nexport class CompanyService {\n  constructor(private http: HttpClient) { }\n  baseUrl: string = 'http://localhost:8080/v1/companies';\n\n  getCompanies() {\n  /*  let fakeCompanies = [{company_id: '4ee3a8d8-ca7b-4290-a52c-dd5b6165ec11', name: 'Envisionworld Ltd.',\n      address: '1 Canada Square, Canary Wharf', city: 'London', country: 'United Kingdom',\n      email: 'roman.szarowski@gmail.com', phone: '+420123456789', beneficial_owners: [owner_name: 'Roman Szarowski']}];\n   return Observable.of(fakeCompanies).delay(5000); */\n    return this.http.get<Company[]>(this.baseUrl);\n  }\n\n  getCompanyById(company_id: string) {\n    return this.http.get<Company>(this.baseUrl + '/' + company_id);\n  }\n\n  createCompany(company: Company) {\n    company.beneficial_owners = company.owners_string.split(',');\n    return this.http.post(this.baseUrl, company);\n  }\n\n  updateCompany(company: Company) {\n    company.beneficial_owners = company.owners_string.split(',');\n    return this.http.put(this.baseUrl + '/' + company.company_id, company);\n  }\n\n  deleteCompany(company_id: string) {\n    return this.http.delete(this.baseUrl + '/' + company_id);\n  }\n\n  addOwner(company_id: string, owner: BeneficialOwner) {\n    return this.http.put(this.baseUrl + '/' + company_id + '/add_beneficial_owner', owner);\n  }\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build ---prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * In development mode, to ignore zone related error stack frames such as\n * `zone.run`, `zoneDelegate.invokeTask` for easier debugging, you can\n * import the following file, but please comment it out in production mode\n * because it will have performance impact when throw error\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.log(err));\n"],"sourceRoot":""}